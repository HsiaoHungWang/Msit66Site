@{
    ViewData["Title"] = "Home Page";
}

@section Styles{
    <style>
        h1 {
            color: orange
        }

        h2 {
            color: gray
        }

     
    </style>
}



<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
    <button id="button1">click</button>
    <div id="div1"></div>
</div>

@section Scripts{
    <script>
        //step1 要控制哪一個標籤就先找到那個標籤 querySelector('css selectors')
        const btn = document.querySelector('#button1');
        const myDiv = document.querySelector('#div1');
        const myH = document.querySelector('.display-4');


        //step2 甚麼時候
        btn.addEventListener('click',()=>{
            //step3 要做甚麼事
            myDiv.innerHTML = "<h2>Hello JavaScript!!</h2>";
        })

        myH.addEventListener('mouseover',()=>{
            myH.style.color = "purple";
        })

        //滑鼠離開mouseout變回橘色
         myH.addEventListener('mouseout',()=>{
            myH.style.color = "orange";
        })


        // setTimeout(function () {
        //     console.log('A');
        //     setTimeout(function () {
        //          console.log('B');
        //          setTimeout(function () {
        //             console.log('C');
        //          }, 1000);
        //     }, 1000);
        // }, 1000);

        // 建立 Promise 物件
        // const myPromise = new Promise((resolve, reject)=>{
        //    非同步程式碼寫在這裡

        //    if(false){
        //      resolve("成功!!");
        //    }else{
        //      reject("失敗!!");
        //    }
        // });

        // 使用 Promise 物件
        // myPromise
        //   .then((data)=>{
        //       console.log(data);
        //   })
        //   .catch((error)=>{
        //       console.log(error);
        //   })
        //   .finally(()=>{
        //       console.log("end");
        //   })


        function printSomething(data){
            const promise = new Promise((resolve,reject)=>{
               setTimeout(function () {
                 resolve(data + "2")
                }, 1000);
            })
            return promise;   
        }

        // console.log(printSomething("A"))
        // printSomething("A")
        //    .then(data=>{
        //        console.log(data);
        //        return printSomething("B");
        //    })
        //    .then(data=>{
        //        console.log(data);
        //        return printSomething("C");
        //    })
        //    .then(data=>{
        //        console.log(data);
        //    })

        //改用 async await 來取得Promise物件回傳的結果

        async function callPromise(){
            let data = await printSomething("A");
            console.log(data);
            data = await printSomething("B");
            console.log(data);
            data = await printSomething("C");
            console.log(data);
        }

        callPromise();

        

        

    </script>
}


